.. _actuarial.yield_curve:

Yield Curve
===========

.. toctree::
    :maxdepth: 1
    :hidden:

    YieldCurve.rst
    Flat.rst
    LinearInterpolation.rst
    Mixture.rst
    NelsonSiegel.rst
    RawInterpolation.rst
    Discounting.rst

   

The yield curve module provides all the tools needed to work with yield curves.

.. panels::
    :column: col-12 col-sm-6 col-lg-3 text-center p-1

    :fa:`puzzle-piece,fa-4x`

    Use various built-in yield curves
    ---
    :fa:`crosshairs,fa-4x`

    Calibrate your yield curves
    ---
    :fa:`sync-alt,fa-4x`

    Easy conversion to discount factors
    ---
    :fa:`tools,fa-4x`

    Build your own yield curve classes



.. rubric:: :subtitle:`Importation`

The yield curve module can be easily imported from the actuarial package:

.. code-block:: python

    from actuarial import yield_curve



.. rubric:: :subtitle:`Content`

Several classes are implemented in this module:

    |1| Abstract yield curve class

    |2| Various yield curve models

    |3| Discounting toolkit

First, we can find an **abstract class** called `YieldCurve`.
This abstract class allows building yield curve models in a standardized way and with various pre-implemented features.
Therefore, all yield curve models implemented in this package inherit from this abstract class.
Moreover, it also allows you to build and customize your own yield curve models (by inheriting from this abstract class).
Related documentation can be found here: :ref:`yield_curve.YieldCurve`.

Secondly, the module offers different **yield curve models**.
For example, it implements the flat yield curve model, the Nelson-Siegel model, the linearly interpolated yield curve, ...
All these models inherit from the `YieldCurve` abstract class as described above.
In this way, they all share a common set of features (properties and methods) and they can be easily identified as a yield curve
(using Python's built-in functions `isinstance` or `issubclass`).
The following yield curve models are implemented in this module (in alphabetical order):

.. list-table:: List of yield curve models.
    :header-rows: 1
    :align: center
    :widths: 50 25 25

    *   - .. centered:: Yield curve model
        - .. centered:: Parametric
        - .. centered:: Interpolation
    *   - :ref:`yield_curve.Flat`
        - .. centered:: |V|
        - .. centered:: |X|
    *   - :ref:`yield_curve.LinearInterpolation`
        - .. centered:: |X|
        - .. centered:: |V|
    *   - :ref:`yield_curve.Mixture`
        - .. centered:: |X|
        - .. centered:: |X|
    *   - :ref:`yield_curve.NelsonSiegel`
        - .. centered:: |V|
        - .. centered:: |X|
    *   - :ref:`yield_curve.RawInterpolation`
        - .. centered:: |X|
        - .. centered:: |V|

Finally, the yield curve module provides a `Discounting` class.
This class is a **toolkit** to efficiently manage discount values such as compound rates, continuously compounded rates,
simple rates, discount factors and capitalization factors.
In particular, it allows easy conversion from one type to another, for example, to convert compound rates into discount factors,
simple rates into continuously compounded rates, ...
Related documentation can be found here: :ref:`Discounting <yield_curve.Discounting>`.